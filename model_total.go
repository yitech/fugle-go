/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuglego

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Total type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Total{}

// Total struct for Total
type Total struct {
	TradeValue int32 `json:"tradeValue"`
	TradeVolume int32 `json:"tradeVolume"`
	TradeVolumeAtBid int32 `json:"tradeVolumeAtBid"`
	TradeVolumeAtAsk int32 `json:"tradeVolumeAtAsk"`
	Transaction int32 `json:"transaction"`
	Time int32 `json:"time"`
}

type _Total Total

// NewTotal instantiates a new Total object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotal(tradeValue int32, tradeVolume int32, tradeVolumeAtBid int32, tradeVolumeAtAsk int32, transaction int32, time int32) *Total {
	this := Total{}
	this.TradeValue = tradeValue
	this.TradeVolume = tradeVolume
	this.TradeVolumeAtBid = tradeVolumeAtBid
	this.TradeVolumeAtAsk = tradeVolumeAtAsk
	this.Transaction = transaction
	this.Time = time
	return &this
}

// NewTotalWithDefaults instantiates a new Total object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalWithDefaults() *Total {
	this := Total{}
	return &this
}

// GetTradeValue returns the TradeValue field value
func (o *Total) GetTradeValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TradeValue
}

// GetTradeValueOk returns a tuple with the TradeValue field value
// and a boolean to check if the value has been set.
func (o *Total) GetTradeValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeValue, true
}

// SetTradeValue sets field value
func (o *Total) SetTradeValue(v int32) {
	o.TradeValue = v
}

// GetTradeVolume returns the TradeVolume field value
func (o *Total) GetTradeVolume() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TradeVolume
}

// GetTradeVolumeOk returns a tuple with the TradeVolume field value
// and a boolean to check if the value has been set.
func (o *Total) GetTradeVolumeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeVolume, true
}

// SetTradeVolume sets field value
func (o *Total) SetTradeVolume(v int32) {
	o.TradeVolume = v
}

// GetTradeVolumeAtBid returns the TradeVolumeAtBid field value
func (o *Total) GetTradeVolumeAtBid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TradeVolumeAtBid
}

// GetTradeVolumeAtBidOk returns a tuple with the TradeVolumeAtBid field value
// and a boolean to check if the value has been set.
func (o *Total) GetTradeVolumeAtBidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeVolumeAtBid, true
}

// SetTradeVolumeAtBid sets field value
func (o *Total) SetTradeVolumeAtBid(v int32) {
	o.TradeVolumeAtBid = v
}

// GetTradeVolumeAtAsk returns the TradeVolumeAtAsk field value
func (o *Total) GetTradeVolumeAtAsk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TradeVolumeAtAsk
}

// GetTradeVolumeAtAskOk returns a tuple with the TradeVolumeAtAsk field value
// and a boolean to check if the value has been set.
func (o *Total) GetTradeVolumeAtAskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeVolumeAtAsk, true
}

// SetTradeVolumeAtAsk sets field value
func (o *Total) SetTradeVolumeAtAsk(v int32) {
	o.TradeVolumeAtAsk = v
}

// GetTransaction returns the Transaction field value
func (o *Total) GetTransaction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *Total) GetTransactionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *Total) SetTransaction(v int32) {
	o.Transaction = v
}

// GetTime returns the Time field value
func (o *Total) GetTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *Total) GetTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *Total) SetTime(v int32) {
	o.Time = v
}

func (o Total) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Total) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tradeValue"] = o.TradeValue
	toSerialize["tradeVolume"] = o.TradeVolume
	toSerialize["tradeVolumeAtBid"] = o.TradeVolumeAtBid
	toSerialize["tradeVolumeAtAsk"] = o.TradeVolumeAtAsk
	toSerialize["transaction"] = o.Transaction
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *Total) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tradeValue",
		"tradeVolume",
		"tradeVolumeAtBid",
		"tradeVolumeAtAsk",
		"transaction",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTotal := _Total{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTotal)

	if err != nil {
		return err
	}

	*o = Total(varTotal)

	return err
}

type NullableTotal struct {
	value *Total
	isSet bool
}

func (v NullableTotal) Get() *Total {
	return v.value
}

func (v *NullableTotal) Set(val *Total) {
	v.value = val
	v.isSet = true
}

func (v NullableTotal) IsSet() bool {
	return v.isSet
}

func (v *NullableTotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotal(val *Total) *NullableTotal {
	return &NullableTotal{value: val, isSet: true}
}

func (v NullableTotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


