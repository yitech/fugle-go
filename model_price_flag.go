/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugle-go

import (
	"encoding/json"
	"fmt"
)

// PriceFlag the model 'PriceFlag'
type PriceFlag string

// List of PriceFlag
const (
	Limit PriceFlag = "0"
	Flat PriceFlag = "1"
	LimitDown PriceFlag = "2"
	LimitUp PriceFlag = "3"
	Market PriceFlag = "4"
)

// All allowed values of PriceFlag enum
var AllowedPriceFlagEnumValues = []PriceFlag{
	"0",
	"1",
	"2",
	"3",
	"4",
}

func (v *PriceFlag) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceFlag(value)
	for _, existing := range AllowedPriceFlagEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceFlag", value)
}

// NewPriceFlagFromValue returns a pointer to a valid PriceFlag
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceFlagFromValue(v string) (*PriceFlag, error) {
	ev := PriceFlag(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceFlag: valid values are %v", v, AllowedPriceFlagEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceFlag) IsValid() bool {
	for _, existing := range AllowedPriceFlagEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceFlag value
func (v PriceFlag) Ptr() *PriceFlag {
	return &v
}

type NullablePriceFlag struct {
	value *PriceFlag
	isSet bool
}

func (v NullablePriceFlag) Get() *PriceFlag {
	return v.value
}

func (v *NullablePriceFlag) Set(val *PriceFlag) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceFlag) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceFlag(val *PriceFlag) *NullablePriceFlag {
	return &NullablePriceFlag{value: val, isSet: true}
}

func (v NullablePriceFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

