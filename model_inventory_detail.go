/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuglego

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InventoryDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryDetail{}

// InventoryDetail struct for InventoryDetail
type InventoryDetail struct {
	BuySell string `json:"buy_sell"`
	CostR *float32 `json:"cost_r,omitempty"`
	Fee float32 `json:"fee"`
	MakeA float32 `json:"make_a"`
	MakeAPer float32 `json:"make_a_per"`
	OrdNo string `json:"ord_no"`
	PayN float32 `json:"pay_n"`
	Price float32 `json:"price"`
	PriceEvn float32 `json:"price_evn"`
	Qty int32 `json:"qty"`
	QtyC *int32 `json:"qty_c,omitempty"`
	QtyH *int32 `json:"qty_h,omitempty"`
	QtyR *int32 `json:"qty_r,omitempty"`
	TDate string `json:"t_date"`
	TTime *string `json:"t_time,omitempty"`
	Tax *float32 `json:"tax,omitempty"`
	TaxG *float32 `json:"tax_g,omitempty"`
	Trade *int32 `json:"trade,omitempty"`
	ValueMkt float32 `json:"value_mkt"`
	ValueNow float32 `json:"value_now"`
	UserDef *string `json:"user_def,omitempty"`
}

type _InventoryDetail InventoryDetail

// NewInventoryDetail instantiates a new InventoryDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryDetail(buySell string, fee float32, makeA float32, makeAPer float32, ordNo string, payN float32, price float32, priceEvn float32, qty int32, tDate string, valueMkt float32, valueNow float32) *InventoryDetail {
	this := InventoryDetail{}
	this.BuySell = buySell
	this.Fee = fee
	this.MakeA = makeA
	this.MakeAPer = makeAPer
	this.OrdNo = ordNo
	this.PayN = payN
	this.Price = price
	this.PriceEvn = priceEvn
	this.Qty = qty
	this.TDate = tDate
	this.ValueMkt = valueMkt
	this.ValueNow = valueNow
	return &this
}

// NewInventoryDetailWithDefaults instantiates a new InventoryDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryDetailWithDefaults() *InventoryDetail {
	this := InventoryDetail{}
	return &this
}

// GetBuySell returns the BuySell field value
func (o *InventoryDetail) GetBuySell() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuySell
}

// GetBuySellOk returns a tuple with the BuySell field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetBuySellOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuySell, true
}

// SetBuySell sets field value
func (o *InventoryDetail) SetBuySell(v string) {
	o.BuySell = v
}

// GetCostR returns the CostR field value if set, zero value otherwise.
func (o *InventoryDetail) GetCostR() float32 {
	if o == nil || IsNil(o.CostR) {
		var ret float32
		return ret
	}
	return *o.CostR
}

// GetCostROk returns a tuple with the CostR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetCostROk() (*float32, bool) {
	if o == nil || IsNil(o.CostR) {
		return nil, false
	}
	return o.CostR, true
}

// HasCostR returns a boolean if a field has been set.
func (o *InventoryDetail) HasCostR() bool {
	if o != nil && !IsNil(o.CostR) {
		return true
	}

	return false
}

// SetCostR gets a reference to the given float32 and assigns it to the CostR field.
func (o *InventoryDetail) SetCostR(v float32) {
	o.CostR = &v
}

// GetFee returns the Fee field value
func (o *InventoryDetail) GetFee() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetFeeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *InventoryDetail) SetFee(v float32) {
	o.Fee = v
}

// GetMakeA returns the MakeA field value
func (o *InventoryDetail) GetMakeA() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MakeA
}

// GetMakeAOk returns a tuple with the MakeA field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetMakeAOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MakeA, true
}

// SetMakeA sets field value
func (o *InventoryDetail) SetMakeA(v float32) {
	o.MakeA = v
}

// GetMakeAPer returns the MakeAPer field value
func (o *InventoryDetail) GetMakeAPer() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MakeAPer
}

// GetMakeAPerOk returns a tuple with the MakeAPer field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetMakeAPerOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MakeAPer, true
}

// SetMakeAPer sets field value
func (o *InventoryDetail) SetMakeAPer(v float32) {
	o.MakeAPer = v
}

// GetOrdNo returns the OrdNo field value
func (o *InventoryDetail) GetOrdNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrdNo
}

// GetOrdNoOk returns a tuple with the OrdNo field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetOrdNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrdNo, true
}

// SetOrdNo sets field value
func (o *InventoryDetail) SetOrdNo(v string) {
	o.OrdNo = v
}

// GetPayN returns the PayN field value
func (o *InventoryDetail) GetPayN() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PayN
}

// GetPayNOk returns a tuple with the PayN field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetPayNOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayN, true
}

// SetPayN sets field value
func (o *InventoryDetail) SetPayN(v float32) {
	o.PayN = v
}

// GetPrice returns the Price field value
func (o *InventoryDetail) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *InventoryDetail) SetPrice(v float32) {
	o.Price = v
}

// GetPriceEvn returns the PriceEvn field value
func (o *InventoryDetail) GetPriceEvn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PriceEvn
}

// GetPriceEvnOk returns a tuple with the PriceEvn field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetPriceEvnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceEvn, true
}

// SetPriceEvn sets field value
func (o *InventoryDetail) SetPriceEvn(v float32) {
	o.PriceEvn = v
}

// GetQty returns the Qty field value
func (o *InventoryDetail) GetQty() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Qty
}

// GetQtyOk returns a tuple with the Qty field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetQtyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qty, true
}

// SetQty sets field value
func (o *InventoryDetail) SetQty(v int32) {
	o.Qty = v
}

// GetQtyC returns the QtyC field value if set, zero value otherwise.
func (o *InventoryDetail) GetQtyC() int32 {
	if o == nil || IsNil(o.QtyC) {
		var ret int32
		return ret
	}
	return *o.QtyC
}

// GetQtyCOk returns a tuple with the QtyC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetQtyCOk() (*int32, bool) {
	if o == nil || IsNil(o.QtyC) {
		return nil, false
	}
	return o.QtyC, true
}

// HasQtyC returns a boolean if a field has been set.
func (o *InventoryDetail) HasQtyC() bool {
	if o != nil && !IsNil(o.QtyC) {
		return true
	}

	return false
}

// SetQtyC gets a reference to the given int32 and assigns it to the QtyC field.
func (o *InventoryDetail) SetQtyC(v int32) {
	o.QtyC = &v
}

// GetQtyH returns the QtyH field value if set, zero value otherwise.
func (o *InventoryDetail) GetQtyH() int32 {
	if o == nil || IsNil(o.QtyH) {
		var ret int32
		return ret
	}
	return *o.QtyH
}

// GetQtyHOk returns a tuple with the QtyH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetQtyHOk() (*int32, bool) {
	if o == nil || IsNil(o.QtyH) {
		return nil, false
	}
	return o.QtyH, true
}

// HasQtyH returns a boolean if a field has been set.
func (o *InventoryDetail) HasQtyH() bool {
	if o != nil && !IsNil(o.QtyH) {
		return true
	}

	return false
}

// SetQtyH gets a reference to the given int32 and assigns it to the QtyH field.
func (o *InventoryDetail) SetQtyH(v int32) {
	o.QtyH = &v
}

// GetQtyR returns the QtyR field value if set, zero value otherwise.
func (o *InventoryDetail) GetQtyR() int32 {
	if o == nil || IsNil(o.QtyR) {
		var ret int32
		return ret
	}
	return *o.QtyR
}

// GetQtyROk returns a tuple with the QtyR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetQtyROk() (*int32, bool) {
	if o == nil || IsNil(o.QtyR) {
		return nil, false
	}
	return o.QtyR, true
}

// HasQtyR returns a boolean if a field has been set.
func (o *InventoryDetail) HasQtyR() bool {
	if o != nil && !IsNil(o.QtyR) {
		return true
	}

	return false
}

// SetQtyR gets a reference to the given int32 and assigns it to the QtyR field.
func (o *InventoryDetail) SetQtyR(v int32) {
	o.QtyR = &v
}

// GetTDate returns the TDate field value
func (o *InventoryDetail) GetTDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TDate
}

// GetTDateOk returns a tuple with the TDate field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetTDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TDate, true
}

// SetTDate sets field value
func (o *InventoryDetail) SetTDate(v string) {
	o.TDate = v
}

// GetTTime returns the TTime field value if set, zero value otherwise.
func (o *InventoryDetail) GetTTime() string {
	if o == nil || IsNil(o.TTime) {
		var ret string
		return ret
	}
	return *o.TTime
}

// GetTTimeOk returns a tuple with the TTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetTTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TTime) {
		return nil, false
	}
	return o.TTime, true
}

// HasTTime returns a boolean if a field has been set.
func (o *InventoryDetail) HasTTime() bool {
	if o != nil && !IsNil(o.TTime) {
		return true
	}

	return false
}

// SetTTime gets a reference to the given string and assigns it to the TTime field.
func (o *InventoryDetail) SetTTime(v string) {
	o.TTime = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *InventoryDetail) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *InventoryDetail) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *InventoryDetail) SetTax(v float32) {
	o.Tax = &v
}

// GetTaxG returns the TaxG field value if set, zero value otherwise.
func (o *InventoryDetail) GetTaxG() float32 {
	if o == nil || IsNil(o.TaxG) {
		var ret float32
		return ret
	}
	return *o.TaxG
}

// GetTaxGOk returns a tuple with the TaxG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetTaxGOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxG) {
		return nil, false
	}
	return o.TaxG, true
}

// HasTaxG returns a boolean if a field has been set.
func (o *InventoryDetail) HasTaxG() bool {
	if o != nil && !IsNil(o.TaxG) {
		return true
	}

	return false
}

// SetTaxG gets a reference to the given float32 and assigns it to the TaxG field.
func (o *InventoryDetail) SetTaxG(v float32) {
	o.TaxG = &v
}

// GetTrade returns the Trade field value if set, zero value otherwise.
func (o *InventoryDetail) GetTrade() int32 {
	if o == nil || IsNil(o.Trade) {
		var ret int32
		return ret
	}
	return *o.Trade
}

// GetTradeOk returns a tuple with the Trade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetTradeOk() (*int32, bool) {
	if o == nil || IsNil(o.Trade) {
		return nil, false
	}
	return o.Trade, true
}

// HasTrade returns a boolean if a field has been set.
func (o *InventoryDetail) HasTrade() bool {
	if o != nil && !IsNil(o.Trade) {
		return true
	}

	return false
}

// SetTrade gets a reference to the given int32 and assigns it to the Trade field.
func (o *InventoryDetail) SetTrade(v int32) {
	o.Trade = &v
}

// GetValueMkt returns the ValueMkt field value
func (o *InventoryDetail) GetValueMkt() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ValueMkt
}

// GetValueMktOk returns a tuple with the ValueMkt field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetValueMktOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueMkt, true
}

// SetValueMkt sets field value
func (o *InventoryDetail) SetValueMkt(v float32) {
	o.ValueMkt = v
}

// GetValueNow returns the ValueNow field value
func (o *InventoryDetail) GetValueNow() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ValueNow
}

// GetValueNowOk returns a tuple with the ValueNow field value
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetValueNowOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueNow, true
}

// SetValueNow sets field value
func (o *InventoryDetail) SetValueNow(v float32) {
	o.ValueNow = v
}

// GetUserDef returns the UserDef field value if set, zero value otherwise.
func (o *InventoryDetail) GetUserDef() string {
	if o == nil || IsNil(o.UserDef) {
		var ret string
		return ret
	}
	return *o.UserDef
}

// GetUserDefOk returns a tuple with the UserDef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetail) GetUserDefOk() (*string, bool) {
	if o == nil || IsNil(o.UserDef) {
		return nil, false
	}
	return o.UserDef, true
}

// HasUserDef returns a boolean if a field has been set.
func (o *InventoryDetail) HasUserDef() bool {
	if o != nil && !IsNil(o.UserDef) {
		return true
	}

	return false
}

// SetUserDef gets a reference to the given string and assigns it to the UserDef field.
func (o *InventoryDetail) SetUserDef(v string) {
	o.UserDef = &v
}

func (o InventoryDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["buy_sell"] = o.BuySell
	if !IsNil(o.CostR) {
		toSerialize["cost_r"] = o.CostR
	}
	toSerialize["fee"] = o.Fee
	toSerialize["make_a"] = o.MakeA
	toSerialize["make_a_per"] = o.MakeAPer
	toSerialize["ord_no"] = o.OrdNo
	toSerialize["pay_n"] = o.PayN
	toSerialize["price"] = o.Price
	toSerialize["price_evn"] = o.PriceEvn
	toSerialize["qty"] = o.Qty
	if !IsNil(o.QtyC) {
		toSerialize["qty_c"] = o.QtyC
	}
	if !IsNil(o.QtyH) {
		toSerialize["qty_h"] = o.QtyH
	}
	if !IsNil(o.QtyR) {
		toSerialize["qty_r"] = o.QtyR
	}
	toSerialize["t_date"] = o.TDate
	if !IsNil(o.TTime) {
		toSerialize["t_time"] = o.TTime
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.TaxG) {
		toSerialize["tax_g"] = o.TaxG
	}
	if !IsNil(o.Trade) {
		toSerialize["trade"] = o.Trade
	}
	toSerialize["value_mkt"] = o.ValueMkt
	toSerialize["value_now"] = o.ValueNow
	if !IsNil(o.UserDef) {
		toSerialize["user_def"] = o.UserDef
	}
	return toSerialize, nil
}

func (o *InventoryDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"buy_sell",
		"fee",
		"make_a",
		"make_a_per",
		"ord_no",
		"pay_n",
		"price",
		"price_evn",
		"qty",
		"t_date",
		"value_mkt",
		"value_now",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInventoryDetail := _InventoryDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInventoryDetail)

	if err != nil {
		return err
	}

	*o = InventoryDetail(varInventoryDetail)

	return err
}

type NullableInventoryDetail struct {
	value *InventoryDetail
	isSet bool
}

func (v NullableInventoryDetail) Get() *InventoryDetail {
	return v.value
}

func (v *NullableInventoryDetail) Set(val *InventoryDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryDetail(val *InventoryDetail) *NullableInventoryDetail {
	return &NullableInventoryDetail{value: val, isSet: true}
}

func (v NullableInventoryDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


