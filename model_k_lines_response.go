/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fuglego

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KLinesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KLinesResponse{}

// KLinesResponse struct for KLinesResponse
type KLinesResponse struct {
	Symbol string `json:"symbol"`
	Type string `json:"type"`
	Exchange string `json:"exchange"`
	Market string `json:"market"`
	Timeframe string `json:"timeframe"`
	Data []KLine `json:"data"`
}

type _KLinesResponse KLinesResponse

// NewKLinesResponse instantiates a new KLinesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKLinesResponse(symbol string, type_ string, exchange string, market string, timeframe string, data []KLine) *KLinesResponse {
	this := KLinesResponse{}
	this.Symbol = symbol
	this.Type = type_
	this.Exchange = exchange
	this.Market = market
	this.Timeframe = timeframe
	this.Data = data
	return &this
}

// NewKLinesResponseWithDefaults instantiates a new KLinesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKLinesResponseWithDefaults() *KLinesResponse {
	this := KLinesResponse{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *KLinesResponse) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *KLinesResponse) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *KLinesResponse) SetSymbol(v string) {
	o.Symbol = v
}

// GetType returns the Type field value
func (o *KLinesResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KLinesResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KLinesResponse) SetType(v string) {
	o.Type = v
}

// GetExchange returns the Exchange field value
func (o *KLinesResponse) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *KLinesResponse) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *KLinesResponse) SetExchange(v string) {
	o.Exchange = v
}

// GetMarket returns the Market field value
func (o *KLinesResponse) GetMarket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *KLinesResponse) GetMarketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *KLinesResponse) SetMarket(v string) {
	o.Market = v
}

// GetTimeframe returns the Timeframe field value
func (o *KLinesResponse) GetTimeframe() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value
// and a boolean to check if the value has been set.
func (o *KLinesResponse) GetTimeframeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeframe, true
}

// SetTimeframe sets field value
func (o *KLinesResponse) SetTimeframe(v string) {
	o.Timeframe = v
}

// GetData returns the Data field value
func (o *KLinesResponse) GetData() []KLine {
	if o == nil {
		var ret []KLine
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *KLinesResponse) GetDataOk() ([]KLine, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *KLinesResponse) SetData(v []KLine) {
	o.Data = v
}

func (o KLinesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KLinesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["type"] = o.Type
	toSerialize["exchange"] = o.Exchange
	toSerialize["market"] = o.Market
	toSerialize["timeframe"] = o.Timeframe
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *KLinesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"symbol",
		"type",
		"exchange",
		"market",
		"timeframe",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKLinesResponse := _KLinesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKLinesResponse)

	if err != nil {
		return err
	}

	*o = KLinesResponse(varKLinesResponse)

	return err
}

type NullableKLinesResponse struct {
	value *KLinesResponse
	isSet bool
}

func (v NullableKLinesResponse) Get() *KLinesResponse {
	return v.value
}

func (v *NullableKLinesResponse) Set(val *KLinesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKLinesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKLinesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKLinesResponse(val *KLinesResponse) *NullableKLinesResponse {
	return &NullableKLinesResponse{value: val, isSet: true}
}

func (v NullableKLinesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKLinesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


